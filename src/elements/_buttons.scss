@function set-button-text-color($color) {
    @if (lightness( $color ) > 55) {
      @return $button-text-dark;
    }
    @else {
      @return $button-text-white;
    }
}

.btn {
  display: inline-block;
  text-align: center;
  margin-bottom: $spacer/2;
  text-decoration: none;
  padding: 0.5em 1em;
  border: 0;
  border-radius: $border-radius;
  outline: 0;
  position: relative;
  cursor: pointer;
  user-select: none;
  line-height: $line-height * 1.0rem;

  //adding a pseudo before element for the focus effect:
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    opacity: 0.25;
    transition: .25s box-shadow;
  }

  /* loading */
  &.loading {
    color: transparent!important;
    min-height: .8rem;
    pointer-events: none;
    position: relative;
    &::after {
      /* find spin animation at the end of this file */
      animation: spin .5s infinite linear;
      border-radius: 50%;
      content: "";
      display: block;
      height: .8rem;
      left: 50%;
      margin-left: -.4rem;
      margin-top: -.4rem;
      position: absolute;
      top: 50%;
      width: .8rem;
      z-index: 1;
    }
  }
}

.btn-xl {
  @extend .btn;
  font-size: 1.5rem;
}

.btn-lg {
  @extend .btn;
  font-size: 1.25rem;
}

.btn-sm {
  @extend .btn;
  font-size: .75rem;
}

@each $name, $color in $colors {
  .btn-#{$name} {
    color: set-button-text-color($color);
    background-color: #{$color};

    &:hover {
      background-color: darken($color, 5%);
    }
    &:active {
      background-color: darken($color, 2.5%);
    }
    &:focus {
      &::before {
        box-shadow: 0 0 0 $button-focus-width $color;
      }
    }

    /* Loading */
    &.loading {
      &::after {
        border: $border-width*2 solid set-button-text-color($color);
        border-right-color: transparent;
        border-top-color: transparent;
      }
    }
  }

  .btn-alt-#{$name} {
    border: $border-width solid $color;
    color: $color;
    background-color: transparent;
    padding: calc(0.5em - #{$border-width}) calc(1em - #{$border-width});
    &:hover {
      color: set-button-text-color($color);
      background-color: #{$color};
    }
    &:active {
      color: set-button-text-color($color);
      background-color: darken($color, 2.5%);
    }
    &:focus {
      &::before {
        box-shadow: 0 0 0 calc(#{$button-focus-width} + #{$border-width}) $color;
      }
    }

    /* Loading */
    &.loading {
      &::after {
        border: $border-width*2 solid $color;
        border-right-color: transparent;
        border-top-color: transparent;
      }
    }
  }
}

/* Button Groups */
.btn-group {
  .btn {
    border-radius: 0;
    margin-right: $border-width * -1;
    float: left;
  }
  .btn:first-child {
    border-radius: $border-radius 0 0 $border-radius;
  }
  .btn:last-child {
    border-radius: 0 $border-radius $border-radius 0;
  }
  @include clearfix;
}


/* Square & Circle Button */
.btn-square {
  width: calc(#{$line-height * 1em} + #{$spacer});
  height: calc(#{$line-height * 1em} + #{$spacer});
  padding-left: 0;
  padding-right: 0;
}

.btn-circle {
  @extend .btn-square;
  border-radius: 50%;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
